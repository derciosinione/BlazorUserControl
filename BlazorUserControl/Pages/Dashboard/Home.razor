@page "/op/"
@layout MainLayout
@inject IUserService UserService

<PageTitle>Home</PageTitle>
<link href="css/home.css" rel="stylesheet"/>

<h1>Welcome to Home Page</h1>

<p>This component lists all users fetched from the server.</p>

@if (_isLoading)
{
    <div class="spinner-border" role="status">
        <span class="sr-only"></span>
    </div>
}
else if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-info">
        @_message
    </div>
}
else if (_users == null || !_users.Any())
{
    <div class="alert alert-warning">
        No users found.
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Email</th>
            <th>Created At</th>
            <th>Updated At</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Email</td>
                <td>@user.CreatedAt.ToString("dd MMM yyyy")</td>
                <td>@user.UpdatedAt.ToString("dd MMM yyyy")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<IGetAllUsers_AllUsers_Nodes>? _users;
    private bool _isLoading = true;
    private string? _message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await UserService.GetAllUsers();

            if (response.IsFailed)
            {
                _message = "Failed to load users. Please try again later.";
                Console.WriteLine(response.Errors);
            }
            else
            {
                _users = response.Value;

                if (_users == null || !_users.Any())
                {
                    _message = "No users found.";
                }
            }
        }
        catch (Exception ex)
        {
            _message = "An unexpected error occurred. Please try again later.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

}